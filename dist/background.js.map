{"version":3,"file":"background.js","sources":["webpack://site-blocker/./src/utils/blockedSites.ts","webpack://site-blocker/webpack/bootstrap","webpack://site-blocker/webpack/runtime/define property getters","webpack://site-blocker/webpack/runtime/hasOwnProperty shorthand","webpack://site-blocker/webpack/runtime/make namespace object","webpack://site-blocker/./src/background.ts"],"sourcesContent":["const blockedSites = [\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}imgur.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}youtube.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}reddit.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}messenger.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}linkedin.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n  /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{0,256}news.google.[-a-zA-Z0-9@:%._\\+~#=]{1,256}(\\/)?/,\n];\n\nexport default blockedSites;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import blockedSites from \"./utils/blockedSites\";\nimport { Message } from \"./utils/types\";\n\nlet isBlocking = true;\nchrome.storage.local.set({ isBlocking: true });\n\nlet blockingTimestamp: Date | null = null;\nchrome.storage.local.set({ blockingTimestamp: null });\n\nlet blockingTimerId: NodeJS.Timeout | null;\n\nfunction getIsBlocking(callback: Function) {\n  chrome.storage.local.get(\"isBlocking\", (res) => {\n    if (res[\"isBlocking\"]) {\n      isBlocking = true;\n    } else {\n      isBlocking = false;\n    }\n\n    callback(isBlocking);\n  });\n}\n\nfunction getBlockingTimestamp(callback: Function) {\n  chrome.storage.local.get(\"blockingTimestamp\", (res) => {\n    if (res[\"blockingTimestamp\"]) {\n      blockingTimestamp = res[\"blockingTimestamp\"];\n    } else {\n      blockingTimestamp = null;\n    }\n\n    callback(blockingTimestamp);\n  });\n}\n\nfunction sendBlockingTimestamp(blockingTimestamp: Date | null) {\n  const message: Message = {\n    type: \"BLOCKING_TIMESTAMP\",\n    timestamp: blockingTimestamp,\n  };\n  chrome.runtime.sendMessage(message);\n}\n\nfunction sendIsBlockingStatus(isBlocking: boolean) {\n  const message: Message = { type: \"IS_BLOCKING_STATUS\", isBlocking };\n  chrome.runtime.sendMessage(message);\n}\n\n// TODO doesn't really seem to have helped the delay?\n// chrome.tabs.onCreated.addListener((tab) => {\n//   if (!tab.pendingUrl) return;\n//   if (!tab.id) return;\n//   if (!isBlocking) return;\n\n//   for (const regex of blockedSites) {\n//     if (regex.test(tab.pendingUrl)) {\n//       chrome.tabs.remove(tab.id);\n//       break;\n//     }\n//   }\n// });\n\nchrome.tabs.onUpdated.addListener((tabId, _, tab) => {\n  if (!tab.url) return;\n  if (!isBlocking) return;\n\n  // want to run sync, don't want to bother with forEach\n  for (const regex of blockedSites) {\n    if (regex.test(tab.url)) {\n      chrome.tabs.remove(tabId, () => {\n        console.log(\"removed\", tabId, tab.url);\n      });\n      break;\n    }\n  }\n});\n\nchrome.runtime.onMessage.addListener((message: Message) => {\n  switch (message.type) {\n    case \"REQ_IS_BLOCKING_STATUS\":\n      getIsBlocking(sendIsBlockingStatus);\n      // sendIsBlockingStatus(isBlocking);\n      break;\n    case \"TOGGLE_IS_BLOCKING\":\n      isBlocking = message.isBlocking;\n      chrome.storage.local.set({ isBlocking: isBlocking });\n      sendIsBlockingStatus(isBlocking);\n      break;\n    case \"REQ_BLOCKING_TIMESTAMP\":\n      console.log(\"BACKEND: received request for blocking timestamp\", {\n        blockingTimestamp,\n      });\n      getBlockingTimestamp(sendBlockingTimestamp);\n      // sendBlockingTimestamp(blockingTimestamp);\n      break;\n    case \"SET_BLOCKING_TIMESTAMP\":\n      console.log(\n        \"BACKEND: received request to set blocking timestamp\",\n        message.timestamp\n      );\n\n      if (!message.timestamp) {\n        // set all the variables like below\n        blockingTimestamp = message.timestamp;\n        chrome.storage.local.set({ blockingTimestamp: message.timestamp });\n        sendBlockingTimestamp(blockingTimestamp);\n\n        // cancel the timeout if it's ongoing\n        if (blockingTimerId) {\n          clearTimeout(blockingTimerId);\n        }\n\n        return;\n      }\n\n      blockingTimestamp = message.timestamp;\n      chrome.storage.local.set({ blockingTimestamp: message.timestamp });\n      sendBlockingTimestamp(blockingTimestamp);\n\n      blockingTimerId = setTimeout(() => {\n        blockingTimestamp = null;\n        sendBlockingTimestamp(blockingTimestamp);\n        chrome.storage.local.set({ blockingTimestamp });\n\n        isBlocking = true;\n        sendIsBlockingStatus(isBlocking);\n        chrome.storage.local.set({ isBlocking });\n\n        console.log(\"BACKEND: in set timeout, setting to null\");\n      }, new Date(message.timestamp).getTime() - Date.now());\n      break;\n    default:\n      break;\n  }\n});\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;A;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}